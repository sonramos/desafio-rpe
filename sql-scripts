--- Create database structure ---

CREATE TABLE Cliente (
	idcliente int,
	nome varchar(255),
	idade int,
	statusbloqueio varchar(1),
	limitecredito float
);

CREATE TABLE Fatura (
	idfatura int,
	datavencimento date,
	valor float,
	status varchar(20)
);

CREATE TABLE Pagamento (
	idpagamento int,
	datapagamento date,
	valor float
);


--- Add FK columns ---
ALTER TABLE Fatura ADD COLUMN fk_Cliente_idcliente int;
ALTER TABLE Pagamento ADD COLUMN fk_Cliente_idcliente int;
ALTER TABLE Pagamento ADD COLUMN fk_Fatura_idfatura int;

--- Add PK and FK constraints ---

ALTER TABLE Cliente ADD CONSTRAINT PK_Cliente PRIMARY KEY(idcliente);
ALTER TABLE Fatura ADD CONSTRAINT PK_Fatura PRIMARY KEY(idfatura);
ALTER TABLE Fatura ADD CONSTRAINT FK_Cliente_Fatura FOREIGN KEY(fk_Cliente_idcliente) REFERENCES Cliente;
ALTER TABLE Pagamento ADD CONSTRAINT FK_Cliente_Pagamento FOREIGN KEY(fk_Cliente_idcliente) REFERENCES Cliente;
ALTER TABLE Pagamento ADD CONSTRAINT FK_Fatura_Pagamento FOREIGN KEY(fk_Fatura_idfatura) REFERENCES Fatura;
ALTER TABLE Pagamento ADD CONSTRAINT PK_Pagamento PRIMARY KEY (idpagamento, fk_Cliente_idcliente, fk_Fatura_idfatura);

--- INSERTS ---

-- Cliente --
INSERT INTO Cliente values(1,'John Doe',30,'A',3000.0);
INSERT INTO Cliente values(2,'Jane Doe',25,'A',1000.0);
INSERT INTO Cliente values(3,'Maria Augusta',20,'A',500.0);
INSERT INTO Cliente values(4,'Jose Silva',50,'A',5000.0);
INSERT INTO Cliente values(5,'Mohammed Kumar',36,'A',10000.0);
INSERT INTO Cliente values(6,'Wei Zhang',19,'A',300.0);
INSERT INTO Cliente values(7,'Yan Li',22,'B',1200.0);
INSERT INTO Cliente values(8,'Sam Potter',26,'A',2800.0);
INSERT INTO Cliente values(9,'Jeff Colt',40,'A',2500.0);
INSERT INTO Cliente values(10,'João Silva',43,'A',150000.0);


-- Fatura --

INSERT INTO Fatura values(1,'2023/03/10', 1400.0, 'P', 8);
INSERT INTO Fatura values(2,'2023/02/15', 420.0, 'A', 3);
INSERT INTO Fatura values(3,'2023/02/20', 552.0, 'F', 2);
INSERT INTO Fatura values(4,'2023/02/10', 2200.0, 'P', 4);
INSERT INTO Fatura values(5,'2023/02/15', 4148.0, 'T', 5);
INSERT INTO Fatura values(6,'2023/02/10', 750.0, 'A', 7);
INSERT INTO Fatura values(7,'2023/01/20', 8000.0, 'P', 10);
INSERT INTO Fatura values(8,'2023/02/20', 6980.0, 'P', 10);

-- Pagamento --

INSERT INTO Pagamento values(1,'2023/02/10',2200.0,4,4);
INSERT INTO Pagamento values(1,'2023/02/12',3148.0,5,5);
INSERT INTO Pagamento values(1,'2023/01/20',5000.0,10,7);
INSERT INTO Pagamento values(2,'2023/01/20',3000.0,10,7);
INSERT INTO Pagamento values(1,'2023/02/18',6980.0,10,8);


--- CONSULTAS ---

-- 2.a - Clientes com idate entre 18 e 21 anos com crédito maior ou igual a R$1000 / retorno: Total de clientes --


SELECT nome as "Total de clientes" FROM Cliente WHERE limitecredito >= 1000.0

SELECT COUNT(nome) as "Total de clientes" FROM Cliente WHERE limitecredito >= 1000.0


-- 2.b - Consultar clientes cujo pagamento foi realizado no dia do vencimento da fatura / Retorno: Data de vencimento e a quantidade --

SELECT f.datavencimento as "Data de vencimento", COUNT(c.nome) as "quantidade" FROM Cliente c join Fatura f
	on c.idcliente = f.fk_cliente_idcliente join Pagamento p
	on f.idfatura = p.fk_fatura_idfatura where p.datapagamento = f.datavencimento GROUP BY f.datavencimento
	

-- 2.c - Consultar clientes que realizaram o pagamento 1 dia antes da data de vencimento da fatura. / Retorno: Id do cliente, valor da fatura e data de pagamento --

SELECT p.fk_cliente_idcliente as "Id do cliente", f.valor as "valor da fatura", p.datapagamento as "data de pagamento" FROM Pagamento p JOIN Fatura f
	on p.fk_fatura_idfatura = f.idfatura WHERE p.datapagamento = (f.datavencimento - 1)


-- 2.d - Consultar clientes com pagamento da fatura em atraso / Retorno: Id do cliente, nome, valor da fatura, data de vencimento, status (P=Pago, A=Atraso),
-- e quantidade de dias em atraso --

SELECT c.idcliente, c.nome, f.valor as "valor da fatura", f.datavencimento, f.status, (CURRENT_DATE - f.datavencimento) as "dias em atraso" FROM Cliente c JOIN Fatura f
	on c.idcliente = f.fk_cliente_idcliente WHERE f.status like 'A' and (CURRENT_DATE - f.datavencimento) > 3


-- 2.e - Consultar cliente bloqueado por atraso no pagamento da fatura. (clientes com mais de 3 dias de atraso
-- devem ser bloqueados) / Retorno: Id do cliente, nome, status de bloqueio (A=Ativo, B=Bloqueado), id da fatura, valor da
-- fatura e a quantidade de dias em atraso.

	
SELECT c.idcliente, c.nome, c.statusbloqueio, f.idfatura, f.valor, (CURRENT_DATE - f.datavencimento) as "dias em atraso" FROM Cliente c JOIN Fatura f
	on c.idcliente = f.fk_cliente_idcliente WHERE f.status NOT LIKE 'P' and (CURRENT_DATE - f.datavencimento) > 3


--- 3.a - Bloco anônimo 1: Inserir pagamento e atualizar status da fatura.

DECLARE
valor_pagamento := 100.0;
id_cliente_pagamento int := 2;
id_fatura_pagamento int := 2;
status_fatura CHAR;
BEGIN
	SELECT status INTO status_fatura FROM Fatura WHERE idfatura = id_fatura_pagamento and fk_cliente_idcliente = id_cliente_pagamento
	IF status NOT IN ('F', 'A', 'T') THEN
		RAISE NO_DATA_FOUND
	
	
EXCEPTION
   WHEN NO_DATA_FOUND THEN
   	dbms_output.put_line('Fatura indisponível para pagamento!');   
END


--- select tabelas

SELECT status from Fatura Where status IN ('F','A','T')
select * from pagamento order by datapagamento
select * from fatura
select * from cliente

